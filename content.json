{"posts":[{"title":"Test","text":"[toc] 什麼是 CORS(Cross-Origin Resource Sharing)中文譯作「跨來源資源共用」，指請求的資源並非相同來源，比方引用外站的圖片、Javascript 等資源。 何謂同源(Same Orign Policy)在釐清 CORS 在做什麼之前，首先我們要知道什麼樣的資源稱為同站資源？同站資源亦作為同源，當存取的資源 相同網路協定(Protocol) 、 相同網域(Domain) 、 相同連接阜(Port) ，就會視為同源 舉例 相同網路協定(Protocol)https://www.Sample.com.tw 與 http://www.Sample.com.twhttps 與 http 協定不同，會被視為不同源 相同網域(Domain)https://www.SampleA.com.tw 與 https://www.SampleB.com.tw兩個不同網域，會被視為不同源 https://aaa.Sample.com.tw 與 https://bbb.Sample.com.tw兩個子 subdomain 不同，會被視為不同源 相同連接阜(Port)https://www.Sample.com.tw:1234 與 https://www.Sample.com.tw:5678兩個連接阜不同，會被視為不同源 不同源會怎麼樣?當網域 A 取用網域 B 的資源時，就會無法順利資源，錯誤訊息會像是下方 Access to XMLHttpRequest at ‘https://DomainA/api/v1/Test‘ from origin ‘https://DomainB‘ has been blocked by CORS policy: Request header field content-type is not allowed by Access-Control-Allow-Headers in preflight response. 但為什麼我可以用其它網域的 Image、Javascript、CSS 等資源？有些資源卻無法使用？決定這個來源存取的標準，是請求為「簡單請求」，當只要是簡單請求，就可以順利獲得資源 簡單請求的標準 只能是 HTTP GET, POST or HEAD 方法 自訂的 request header 只能是 Accept、Accept-Language、Content-Language 或 Content-Type（值只能是 application/x-www-form-urlencoded、multipart/form-data 或 text/plain） 僅要符合上述標準，即便是不同源，仍可以正常請求資源 符合簡單請求範例 12Post /data/ Host: outsideSite.com Origin: https://home.com Content-Type:application/x-www-form-urlencoded 不符合簡單請求範例 12Post /data/ Host: outsideSite.com Origin: https://home.com Content-Type:application/json 因為 Content-Type 不符合 Preflight Requet (預檢)當不符合簡單請求時，瀏覽器會正常 Request 前先對請求的資源發一個名為 Preflight Request ，目的要檢查這個資源 (Server) 是否允許目前要進行的真實請求，這個 Request 會對 Server 進行 Http Options 的動作， Server 必須對這個 Preflight Request 進行確認，判斷這個來源是否可以提供存取、使用什麼樣的資料等，接著依照真實的需求回覆，Response Header 可能包含 允許請求的來源(Access-Control-Allow-Origin) 、 允許的請求方式(Access-Control-Allow-Method) 、 允許請求發出的 Header 內容 (Access-Control-Allow-Headers) 。 瀏覽器對 Server 進行 Preflight Request 範例 123OPTIONS /data/ Host: outsideSite.com Origin: https://home.comAccess-Control-Request-Method: POST Access-Control-Request-Headers: X-MY-HEADER,Content-Type Server 對瀏覽器 Preflight Response 範例 12Access-Control-Allow-Origin: Access-Control-Allow-Method: POSTAccess-Control-Allow-Headers: X-MY-HEADER, Content-Type Access-Control-Allow-Origin: 表示允許所有來源這部分允許的內容必須符合 Preflight Request 的 Origin 一旦 Preflight Response 與 Request 內的項目不符，就會被瀏覽器阻擋下來的動作。 參考資料 https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS https://shubo.io/what-is-cors/","link":"/Network/Concept/Test/"},{"title":"理解SQL遞迴查詢：以員工部門階層為例","text":"前言有一天在寫博弈的面試考題時，看到一題要你使用SQL來實現Recursive觀念的題目。 有員工主表(Employee)、部門表(Department)，員工主表有員工與主管間的階層關係，會使用ManagerID來記錄該筆員工的主管是誰，假設如果為null就表示沒有主管，同張表格還有個DepartmentId用於紀錄員工隸屬哪個部門，同時這個部門只有主管才會有值，部屬的DepartmentId會為null，請直接參考主管的部門。請列出員工所有的員工所屬部門。 以前在不使用CTE (Common Table Expression)與Recursive來解決時，就是把資料撈回AP端再進行處理。 範例資料建立表格12345678910111213CREATE TABLE Departments ( DepartmentID INT PRIMARY KEY, DepartmentName NVARCHAR(50));CREATE TABLE Employees ( EmployeeID INT PRIMARY KEY, EmployeeName NVARCHAR(50), ManagerID INT NULL, DepartmentID INT NULL, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)); 測試資料123456789101112INSERT INTO Departments (DepartmentID, DepartmentName) VALUES(1, 'Executive'),(2, 'Sales'),(3, 'Engineering');INSERT INTO Employees (EmployeeID, EmployeeName, ManagerID, DepartmentID) VALUES(1, 'Alice', NULL, 1), -- Alice 是 CEO，隸屬於 Executive 部門(2, 'Bob', 1, 2), -- Bob 是 Sales 部門主管(3, 'Charlie', 1, 3), -- Charlie 是 Engineering 部門主管(4, 'David', 2, NULL), -- David 的上級主管是 Bob，部門由 Bob 決定(5, 'Eve', 2, NULL); -- Eve 的上級主管是 Bob，部門由 Bob 決定 實作RECURSIVE CTE 說明 第一個部分使用MangerID is NULL 作為限制條件，用來取得第一層 進行遞迴時，加入 LEFT JOIN 當 ManagerId = EmloyeeId 的關聯 (找出主管) 加入 COALESCE (合併)，當第一個參數不存在，就為第二個參數，用來決定員工所屬的 DepartmentId 加入 Level 目的是在最後 SELECT 這個 CTE 可以用Recursive後的 Level 進行排序 加入 Departments 的關聯，並且 SELECT 結果 123456789101112131415161718192021222324252627282930313233343536WITH EmployeeHierarchy AS ( -- 基礎案例：選擇最高主管，即 ManagerID 為 NULL 的員工 SELECT e.EmployeeID, e.EmployeeName, e.ManagerID, e.DepartmentID, 0 AS Level FROM Employees e WHERE e.ManagerID IS NULL UNION ALL -- 遞歸案例：加入基於前一層的下屬員工，並分配主管的部門資料 SELECT e.EmployeeID, e.EmployeeName, e.ManagerID, COALESCE(e.DepartmentID, eh.DepartmentID) AS DepartmentID, eh.Level + 1 AS Level FROM Employees e INNER JOIN EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID)-- 最終選擇結果，並連接部門資料SELECT eh.EmployeeID, eh.EmployeeName, eh.ManagerID, eh.DepartmentID, eh.Level, d.DepartmentNameFROM EmployeeHierarchy ehLEFT JOIN Departments d ON eh.DepartmentID = d.DepartmentIDORDER BY eh.Level; 執行結果可以看到階層式的將資料塞選出來，僅需要透過SQL就可以將階層的資料給塞選出來，不需要透過AP端進行處理。 EmployeeID EmployeeName ManagerID DepartmentID Level DepartmentName 1 Alice NULL 1 0 Executive 2 Bob 1 2 1 Sales 3 Charlie 1 3 1 Engineering 4 David 2 2 2 Sales 5 Eve 2 2 2 Sales","link":"/Database/%E7%90%86%E8%A7%A3SQL%E9%81%9E%E8%BF%B4%E6%9F%A5%E8%A9%A2%EF%BC%9A%E4%BB%A5%E5%93%A1%E5%B7%A5%E9%83%A8%E9%96%80%E9%9A%8E%E5%B1%A4%E7%82%BA%E4%BE%8B/"}],"tags":[{"name":"CORS","slug":"CORS","link":"/tags/CORS/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"}],"categories":[{"name":"Network","slug":"Network","link":"/categories/Network/"},{"name":"Database","slug":"Database","link":"/categories/Database/"},{"name":"Concept","slug":"Network/Concept","link":"/categories/Network/Concept/"}],"pages":[{"title":"Test","text":"454665","link":"/Test/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}]}